<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AFlyingSheep&#39;s Blog</title>
  
  <subtitle>Keep coding, keep thinking.</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-02-09T08:06:11.716Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Johnson Shuangjian</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据预处理与特征工程</title>
    <link href="http://example.com/2022/02/09/%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86%E4%B8%8E%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/"/>
    <id>http://example.com/2022/02/09/%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86%E4%B8%8E%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/</id>
    <published>2022-02-09T07:37:02.000Z</published>
    <updated>2022-02-09T08:06:11.716Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="数据预处理与特征工程"   >          <a href="#数据预处理与特征工程" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据预处理与特征工程" class="headerlink" title="数据预处理与特征工程"></a>数据预处理与特征工程</h1>              <h2 id="课纲概述"   >          <a href="#课纲概述" class="heading-link"><i class="fas fa-link"></i></a><a href="#课纲概述" class="headerlink" title="课纲概述"></a>课纲概述</h2>      <ul><li><p>数据挖掘五大流程</p><ol><li><p>获取数据</p></li><li><p>数据预处理 - 使数据匹配与模型</p></li><li><p>特征工程 - 将原始数据转换为更能代表特征的数据</p><ul><li><p>目的：降低计算成本、提高模型上限。</p></li><li><p>提取特征</p></li><li><p>创造特征</p></li></ul></li><li><p>建模</p></li><li><p>上线</p></li></ol></li></ul>        <h2 id="数据预处理"   >          <a href="#数据预处理" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2>              <h3 id="数据的无量纲化"   >          <a href="#数据的无量纲化" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据的无量纲化" class="headerlink" title="数据的无量纲化"></a>数据的无量纲化</h3>      <p>将不同规格的数据转换到统一规格。可以是线性的、非线性的。</p>        <h4 id="数据归一化"   >          <a href="#数据归一化" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据归一化" class="headerlink" title="数据归一化"></a>数据归一化</h4>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler</span><br><span class="line">data = [[-<span class="number">1</span>, <span class="number">2</span>], [-<span class="number">0.5</span>, <span class="number">6</span>], [<span class="number">0</span>, <span class="number">10</span>], [<span class="number">1</span>, <span class="number">18</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">#不太熟悉numpy的小伙伴，能够判断data的结构吗？</span></span><br><span class="line"><span class="comment">#如果换成表是什么样子？</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">pd.DataFrame(data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#实现归一化</span></span><br><span class="line">scaler = MinMaxScaler() <span class="comment">#实例化</span></span><br><span class="line">scaler = scaler.fit(data) <span class="comment">#fit,在这里本质是生成min(x)和max(x)</span></span><br><span class="line">result = scaler.transform(data) <span class="comment">#通过接口导出结果</span></span><br><span class="line">result</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">array([[0.  , 0.  ],</span></span><br><span class="line"><span class="string">       [0.25, 0.25],</span></span><br><span class="line"><span class="string">       [0.5 , 0.5 ],</span></span><br><span class="line"><span class="string">       [1.  , 1.  ]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">result_ = scaler.fit_transform(data) <span class="comment">#训练和导出结果一步达成</span></span><br><span class="line">result_</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">array([[0.  , 0.  ],</span></span><br><span class="line"><span class="string">       [0.25, 0.25],</span></span><br><span class="line"><span class="string">       [0.5 , 0.5 ],</span></span><br><span class="line"><span class="string">       [1.  , 1.  ]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">scaler.inverse_transform(result) <span class="comment">#将归一化后的结果逆转</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">array([[ 5.  ,  5.  ],</span></span><br><span class="line"><span class="string">       [ 6.25,  6.25],</span></span><br><span class="line"><span class="string">       [ 7.5 ,  7.5 ],</span></span><br><span class="line"><span class="string">       [10.  , 10.  ]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用MinMaxScaler的参数feature_range实现将数据归一化到[0,1]以外的范围中</span></span><br><span class="line">data = [[-<span class="number">1</span>, <span class="number">2</span>], [-<span class="number">0.5</span>, <span class="number">6</span>], [<span class="number">0</span>, <span class="number">10</span>], [<span class="number">1</span>, <span class="number">18</span>]]</span><br><span class="line"></span><br><span class="line">scaler = MinMaxScaler(feature_range=[<span class="number">5</span>,<span class="number">10</span>]) <span class="comment">#依然实例化</span></span><br><span class="line">result = scaler.fit_transform(data) <span class="comment">#fit_transform一步导出结果</span></span><br><span class="line">result</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">array([[ 5.  ,  5.  ],</span></span><br><span class="line"><span class="string">       [ 6.25,  6.25],</span></span><br><span class="line"><span class="string">       [ 7.5 ,  7.5 ],</span></span><br><span class="line"><span class="string">       [10.  , 10.  ]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当X中的特征数量非常多的时候，fit会报错并表示：数据量太大了我计算不了，此时使用partial_fit作为训练接口</span></span><br><span class="line">scaler = scaler.partial_fit(data)</span><br></pre></td></tr></table></div></figure>        <h4 id="数据标准化"   >          <a href="#数据标准化" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据标准化" class="headerlink" title="数据标准化"></a>数据标准化</h4>      <p>**数据标准化(Standardization，又称Z-score normalization)**：当数据(x)按均值(μ)中心化后，再按标准差(σ)缩放，数据就会服从为均值为0，方差为1的正态分布（即标准正态分布），公式如下：</p><p><img src="/image/shuju/biaozhunhua.png" alt="标准化"></p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line">data = [[-<span class="number">1</span>, <span class="number">2</span>], [-<span class="number">0.5</span>, <span class="number">6</span>], [<span class="number">0</span>, <span class="number">10</span>], [<span class="number">1</span>, <span class="number">18</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scaler = StandardScaler() <span class="comment">#实例化</span></span><br><span class="line">scaler.fit(data) <span class="comment">#fit，本质是生成均值和方差</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scaler.mean_ <span class="comment">#查看均值的属性mean_</span></span><br><span class="line"><span class="comment"># array([-0.125,  9.   ])</span></span><br><span class="line">scaler.var_ <span class="comment">#查看方差的属性var_</span></span><br><span class="line"><span class="comment"># array([ 0.546875, 35.      ])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x_std = scaler.transform(data) <span class="comment">#通过接口导出结果</span></span><br><span class="line"></span><br><span class="line">x_std.mean() <span class="comment">#导出的结果是一个数组，用mean()查看均值</span></span><br><span class="line"><span class="comment"># 0.0</span></span><br><span class="line">x_std.std() <span class="comment">#用std()查看方差</span></span><br><span class="line"><span class="comment">#1.0</span></span><br><span class="line"></span><br><span class="line">scaler.fit_transform(data) <span class="comment">#使用fit_transform(data)一步达成结果</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">array([[-1.18321596, -1.18321596],</span></span><br><span class="line"><span class="string">       [-0.50709255, -0.50709255],</span></span><br><span class="line"><span class="string">       [ 0.16903085,  0.16903085],</span></span><br><span class="line"><span class="string">       [ 1.52127766,  1.52127766]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">scaler.inverse_transform(x_std) <span class="comment">#使用inverse_transform逆转标准化</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">array([[-1. ,  2. ],</span></span><br><span class="line"><span class="string">       [-0.5,  6. ],</span></span><br><span class="line"><span class="string">       [ 0. , 10. ],</span></span><br><span class="line"><span class="string">       [ 1. , 18. ]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>对于StandardScaler和MinMaxScaler来说，空值NaN会被当做是<strong>缺失值</strong></p><ul><li>在fit的时候会被忽略</li><li>在transform时保持NaN的状态显示</li></ul><p>输入的X为特征矩阵，一般只接受<strong>二维以上</strong>数组，一维导入会报错。</p>        <h4 id="标准化和归一化的选择"   >          <a href="#标准化和归一化的选择" class="heading-link"><i class="fas fa-link"></i></a><a href="#标准化和归一化的选择" class="headerlink" title="标准化和归一化的选择"></a>标准化和归一化的选择</h4>      <ul><li>大多数机器学习算法中，会选择StandardScaler进行特征缩放，因为MinMaxScaler对异常值非常敏感</li><li>在PCA，聚类，逻辑回归，支持向量机，神经网络这些算法中，StandardScaler往往是最好的选择</li></ul><p>MinMaxScaler在不涉及距离度量、梯度、协方差计算以及数据需要被压缩到特定区间时使用广泛，比如<strong>数字图像处理中量化像素强度</strong>时，都会使用MinMaxScaler将数据压缩于[0,1]区间之中。</p><p>建议先试试看StandardScaler，效果不好换MinMaxScaler。</p><p>除了StandardScaler和MinMaxScaler之外，sklearn中也提供了各种其他缩放处理（中心化只需要一个pandas广播一下减去某个数就好了，因此sklearn不提供任何中心化功能）</p><ul><li>在希望压缩数据，却不影响数据的稀疏性时（不影响矩阵中取值为0的个数时），我们会使用MaxAbsScaler（只压缩，不中心化）</li><li>在异常值多，噪声非常大时，我们可能会选用分位数来无量纲化，此时使用RobustScaler</li></ul><p><img src="/image/shuju/wulianggang.png" alt="无量纲"></p>        <h3 id="缺失值处理"   >          <a href="#缺失值处理" class="heading-link"><i class="fas fa-link"></i></a><a href="#缺失值处理" class="headerlink" title="缺失值处理"></a>缺失值处理</h3>      <p><strong>机器学习和数据挖掘中所使用的数据，永远不可能是完美的</strong>。很多特征，对于分析和建模来说意义非凡，但对于实际收集数据的人却不是如此，因此数据挖掘之中，常常会有重要的字段缺失值很多，但又不能舍弃字段的情况。因此，数据预处理中非常重要的一项就是<strong>处理缺失值</strong>。</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用impute.SimpleImputer填补缺失值</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sklearn</span>.<span class="title">impute</span>.<span class="title">SimpleImputer</span> (<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="class">missing_values=nan, </span></span></span><br><span class="line"><span class="params"><span class="class">strategy=<span class="string">&#x27;mean&#x27;</span>, </span></span></span><br><span class="line"><span class="params"><span class="class">fill_value=<span class="literal">None</span>, </span></span></span><br><span class="line"><span class="params"><span class="class">verbose=<span class="number">0</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">copy=<span class="literal">True</span></span></span></span><br><span class="line"><span class="params"><span class="class"></span>)</span></span><br></pre></td></tr></table></div></figure><ul><li><p><strong>missing_values</strong> </p><ul><li>告诉SimpleImputer缺失值是什么样的</li></ul></li><li><p><strong>strategy</strong> </p><ul><li>填补策略，默认采用均值<ul><li>输入”mean”使用均值填补（仅对数值型特征可用）</li><li>输入”median”用中值填补（仅对数值型特征可用）</li><li>输入”most_frequent”用众数填补（对数值型和字符型特征都可用）</li><li>输入”constant”表示请参考参数”fill_value”中的值（对数值型和字符型特征都可用）</li></ul></li></ul></li><li><p><strong>fill_value</strong></p><ul><li>当参数startegy为”constant”的时候可用，可输入字符串或数字表示要填充的值，常用0</li></ul></li><li><p><strong>copy</strong></p><ul><li>默认为True，将创建特征矩阵的副本，反之则会将缺失值填补到原本的特征矩阵中去</li></ul></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment">#index_col=0是因为原数据中第1列本就是索引</span></span><br><span class="line">data = pd.read_csv(<span class="string">r&quot;..\datasets\Narrativedata.csv&quot;</span>,index_col=<span class="number">0</span>)</span><br><span class="line">data.head()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看数据集的总体信息</span></span><br><span class="line">data.info()</span><br><span class="line"><span class="comment"># 由运行结果可知Age和Embarked有缺失值</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span></span><br><span class="line"><span class="string">Int64Index: 891 entries, 0 to 890</span></span><br><span class="line"><span class="string">Data columns (total 4 columns):</span></span><br><span class="line"><span class="string"> #   Column    Non-Null Count  Dtype  </span></span><br><span class="line"><span class="string">---  ------    --------------  -----  </span></span><br><span class="line"><span class="string"> 0   Age       714 non-null    float64</span></span><br><span class="line"><span class="string"> 1   Sex       891 non-null    object </span></span><br><span class="line"><span class="string"> 2   Embarked  889 non-null    object </span></span><br><span class="line"><span class="string"> 3   Survived  891 non-null    object </span></span><br><span class="line"><span class="string">dtypes: float64(1), object(3)</span></span><br><span class="line"><span class="string">memory usage: 34.8+ KB</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看数据</span></span><br><span class="line">Age = data.loc[:,<span class="string">&quot;Age&quot;</span>].values.reshape(-<span class="number">1</span>,<span class="number">1</span>) <span class="comment">#sklearn当中特征矩阵必须是二维</span></span><br><span class="line">Age[:<span class="number">20</span>]</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">array([[22.],</span></span><br><span class="line"><span class="string">       [38.],</span></span><br><span class="line"><span class="string">       [26.],</span></span><br><span class="line"><span class="string">       [35.],</span></span><br><span class="line"><span class="string">       [35.],</span></span><br><span class="line"><span class="string">       [nan],</span></span><br><span class="line"><span class="string">       [54.],</span></span><br><span class="line"><span class="string">       [ 2.],</span></span><br><span class="line"><span class="string">       [27.],</span></span><br><span class="line"><span class="string">       [14.]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">Age = data.loc[:,<span class="string">&quot;Age&quot;</span>].values.reshape(-<span class="number">1</span>,<span class="number">1</span>).shape</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">(-1, 1)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#填补年龄, 分别用均值、中位数、0填补</span></span><br><span class="line"><span class="keyword">from</span> sklearn.impute <span class="keyword">import</span> SimpleImputer</span><br><span class="line">imp_mean = SimpleImputer() <span class="comment">#实例化,默认均值填补</span></span><br><span class="line">imp_median = SimpleImputer(strategy=<span class="string">&quot;median&quot;</span>) <span class="comment">#用中位数填补</span></span><br><span class="line">imp_0 = SimpleImputer(strategy=<span class="string">&quot;constant&quot;</span>,fill_value=<span class="number">0</span>) <span class="comment">#用0填补</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#fit_transform一步完成调取结果</span></span><br><span class="line">imp_mean = imp_mean.fit_transform(Age) <span class="comment">#均值填补</span></span><br><span class="line">imp_median = imp_median.fit_transform(Age) <span class="comment">#中值填补</span></span><br><span class="line">imp_0 = imp_0.fit_transform(Age) <span class="comment"># 使用0填补</span></span><br><span class="line"></span><br><span class="line">imp_mean[:<span class="number">20</span>] <span class="comment"># 查看用均值填补后的前20条数据</span></span><br><span class="line"></span><br><span class="line">imp_median[:<span class="number">10</span>] <span class="comment"># 查看用中值填补后的前20条数据</span></span><br><span class="line"></span><br><span class="line">imp_0[:<span class="number">10</span>] <span class="comment"># 查看用0填补后的前20条数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在这里我们使用中位数填补Age</span></span><br><span class="line">data.loc[:,<span class="string">&quot;Age&quot;</span>] = imp_median</span><br><span class="line"><span class="comment">#data.info()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用众数填补Embarked</span></span><br><span class="line">Embarked = data.loc[:,<span class="string">&quot;Embarked&quot;</span>].values.reshape(-<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">imp_mode = SimpleImputer(strategy = <span class="string">&quot;most_frequent&quot;</span>)</span><br><span class="line">data.loc[:,<span class="string">&quot;Embarked&quot;</span>] = imp_mode.fit_transform(Embarked)</span><br><span class="line"></span><br><span class="line">data.info() <span class="comment">#</span></span><br><span class="line"><span class="comment"># 由结果可知填补已经完成了</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span></span><br><span class="line"><span class="string">Int64Index: 891 entries, 0 to 890</span></span><br><span class="line"><span class="string">Data columns (total 4 columns):</span></span><br><span class="line"><span class="string"> #   Column    Non-Null Count  Dtype  </span></span><br><span class="line"><span class="string">---  ------    --------------  -----  </span></span><br><span class="line"><span class="string"> 0   Age       891 non-null    float64</span></span><br><span class="line"><span class="string"> 1   Sex       891 non-null    object </span></span><br><span class="line"><span class="string"> 2   Embarked  891 non-null    object </span></span><br><span class="line"><span class="string"> 3   Survived  891 non-null    object </span></span><br><span class="line"><span class="string">dtypes: float64(1), object(3)</span></span><br><span class="line"><span class="string">memory usage: 34.8+ KB</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># data.head(20) #显示填补后的前20条数据</span></span><br></pre></td></tr></table></div></figure><p><strong>我们同样可以使用Numpy和Pandas进行填补</strong></p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = pd.read_csv(<span class="string">r&quot;..\datasets\Narrativedata.csv&quot;</span>,index_col=<span class="number">0</span>)</span><br><span class="line">data.head()</span><br><span class="line">data.loc[:,<span class="string">&quot;Age&quot;</span>] = data.loc[:,<span class="string">&quot;Age&quot;</span>].fillna(data.loc[:,<span class="string">&quot;Age&quot;</span>].median())</span><br><span class="line"><span class="comment">#.fillna 在DataFrame里面直接进行填补</span></span><br><span class="line">data.dropna(axis=<span class="number">0</span>,inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#.dropna(axis=0)删除所有有缺失值的行，.dropna(axis=1)删除所有有缺失值的列</span></span><br><span class="line"><span class="comment">#参数inplace，为True表示在原数据集上进行修改，为False表示生成一个复制对象，不修改原数据，默认False</span></span><br></pre></td></tr></table></div></figure>]]></content>
    
    
    <summary type="html">数据预处理与特征工程作为数据挖掘流程中不可或缺的一部分。本文详细介绍了数据处理流程，包括去量纲化、填补缺失值等方法，并用python来具体实现该流程。</summary>
    
    
    
    <category term="AI" scheme="http://example.com/categories/AI/"/>
    
    
    <category term="AI" scheme="http://example.com/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>C#中调用Java的类与方法</title>
    <link href="http://example.com/2022/01/22/c-java/"/>
    <id>http://example.com/2022/01/22/c-java/</id>
    <published>2022-01-22T07:50:05.000Z</published>
    <updated>2022-01-22T07:58:12.677Z</updated>
    
    <content type="html"><![CDATA[<p>C#中调用Java的类与方法</p><ul><li><p>核心：ikvm生成jar的dll文件，在c#中进行引用。</p></li><li><p>易踩坑：java1.7 对应ikvm7；java1.8 对应ikvm8</p></li><li><p>步骤：</p><ol><li>在Idea中，添加非默认文件夹下的包，如图中com。</li></ol><p><img src="/image/C_sharp_Java/1.png" alt="步骤1"></p><ol start="2"><li><p>编写类文件 ChatClient和ChatServer。<br><img src="/image/C_sharp_Java/2.png" alt="步骤2"></p></li><li><p>使用idea对工程进行build，建立jar包。</p></li><li><p>在jar包的目录下cmd输入：ikvmc -out:hello.dll Chat.jar。</p></li><li><p>将生成的dll文件和IKVM的几个文件添加到引用。<br><img src="/image/C_sharp_Java/5.png" alt="步骤5"></p></li><li><p>在C#中引用包，using com;</p></li><li><p>在类中即可调用。<br><img src="/image/C_sharp_Java/7.png" alt="步骤7"></p></li></ol></li></ul>]]></content>
    
    
    <summary type="html">在本篇文章中，我们使用ikvm工具来实现C#中可以调用Java的类与方法。</summary>
    
    
    
    <category term="Other tools" scheme="http://example.com/categories/Other-tools/"/>
    
    
    <category term="Tools" scheme="http://example.com/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>LIS&amp;&amp;LCS以及相互转化问题</title>
    <link href="http://example.com/2022/01/21/LIS-and-LCS/"/>
    <id>http://example.com/2022/01/21/LIS-and-LCS/</id>
    <published>2022-01-21T11:10:02.000Z</published>
    <updated>2022-01-21T11:15:11.994Z</updated>
    
    <content type="html"><![CDATA[<p>在本篇文章中，我们对LCS、LIS问题和两种问题互相转化的条件进行了讨论。</p>        <h1 id="最长公共子序列：动态规划"   >          <a href="#最长公共子序列：动态规划" class="heading-link"><i class="fas fa-link"></i></a><a href="#最长公共子序列：动态规划" class="headerlink" title="最长公共子序列：动态规划"></a>最长公共子序列：动态规划</h1>      <ul><li><p>时间复杂度：O(n * m)</p></li><li><p>举例：<span class="exturl"><a class="exturl__link"   href="https://leetcode-cn.com/problems/longest-common-subsequence/" >Leetcode 1143. 最长的公共子序列</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><ul><li><p>题目描述</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">给定两个字符串 text1 和 text2，返回这两个字符串的最长 公共子序列 的长度。如果不存在 公共子序列返回0。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">一个字符串的子序列是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">例如，&quot;ace&quot; 是 &quot;abcde&quot; 的子序列，但 &quot;aec&quot; 不是 &quot;abcde&quot; 的子序列。两个字符串的公共子序列是这两个字符串所共同拥有的子序列。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></div></figure></li><li><p>本题是一道经典的dp问题。</p></li><li><p>在本题中，我们根据状态转移方程定义不同有两种写法：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种</span></span><br><span class="line"><span class="comment">// dp[i][j] 定义：dp[i][j]为 text1中0~i-1 和 text2中0~j-1中公共串最长长度。</span></span><br><span class="line"><span class="comment">// 此时，初始化数组则为</span></span><br><span class="line">dp[<span class="number">0</span>][i] = <span class="number">0</span>;</span><br><span class="line">dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 状态转移方程：对于dp[i][j]：</span></span><br><span class="line"><span class="comment">// 当字符串1与字符串2的i - 1, j - 1字符相等时</span></span><br><span class="line">dp[i][j] = dp[i – <span class="number">1</span>][j – <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 当字符串i – 1, j – 1字符不等时，则</span></span><br><span class="line">dp[i][j] = max(dp[i – <span class="number">1</span>][j], dp[i][j – <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种</span></span><br><span class="line"><span class="comment">// dp[i][j] 定义： dp[i][j]为 text1中0~i 和 text2中0~j中公共串最长长度</span></span><br><span class="line"><span class="comment">// 此时，初始化数组则有变化：</span></span><br><span class="line"><span class="comment">// 如果text1[i] == text2[0] 说明从此开始到之后的所有字符串均含有公共字符text2[0]，所以从此以后都应赋值为1。而如果不等，则继续向后比较。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 状态转移方程</span></span><br><span class="line"><span class="comment">// 对于dp[i][j]：</span></span><br><span class="line"><span class="keyword">if</span> (text1[i] == text2[j]) dp[i][j] = dp[i – <span class="number">1</span>][j – <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> dp[i][j] = max(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br></pre></td></tr></table></div></figure></li></ul></li></ul>        <h1 id="最长上升子序列：贪心-二分法"   >          <a href="#最长上升子序列：贪心-二分法" class="heading-link"><i class="fas fa-link"></i></a><a href="#最长上升子序列：贪心-二分法" class="headerlink" title="最长上升子序列：贪心+二分法"></a>最长上升子序列：贪心+二分法</h1>      <ul><li><p>时间复杂度：O(nlogn)</p></li><li><p>举例：<span class="exturl"><a class="exturl__link"   href="https://leetcode-cn.com/problems/increasing-triplet-subsequence/" >Leetcode 334. 递增的三元子序列</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><ul><li>题目描述</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">给你一个整数数组 nums ，判断这个数组中是否存在长度为 3 的递增子序列。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如果存在这样的三元组下标 (i, j, k) 且满足 i &lt; j &lt; k ，使得 nums[i] &lt; nums[j] &lt; nums[k] ，返回true ；否则，返回 false 。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></div></figure><ul><li>本题可以使用时间复杂度O(n)的纯贪心策略才做，通过维护first, second和 last 三个变量来寻找。</li><li>为了说明LIS问题，本题我们求出最大的递增子序列并判断与3的关系。<ul><li>我们在遍历每一个nums[i]时，维护一个具有单调性的数组f[]</li><li>其中，f[len] = x代表长度为len的最长上升子序列最小的结尾元素为x</li><li>因此可以每次通过二分法找到小于nums[i]的最大下标，来作为nums[i]的前一个数。</li></ul></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">increasingTriplet</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] f = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">        Arrays.fill(f, Integer.MAX_VALUE);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> t = nums[i];</span><br><span class="line">            <span class="keyword">int</span> l = <span class="number">1</span>, r = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">                <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> (f[mid] &gt;= t) r = mid;</span><br><span class="line">                <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            f[r] = t;</span><br><span class="line">            ans = Math.max(ans, r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans &gt;= <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li></ul><p>​    </p>        <h1 id="LCS-问题与-LIS-问题的相互关系"   >          <a href="#LCS-问题与-LIS-问题的相互关系" class="heading-link"><i class="fas fa-link"></i></a><a href="#LCS-问题与-LIS-问题的相互关系" class="headerlink" title="LCS 问题与 LIS 问题的相互关系"></a>LCS 问题与 LIS 问题的相互关系</h1>      <ul><li><p>举例：<span class="exturl"><a class="exturl__link"   href="https://leetcode-cn.com/problems/minimum-operations-to-make-a-subsequence/" >Leetcode1713. 得到子序列的最少操作次数</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><ul><li>题目描述</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">给你一个数组 target ，包含若干互不相同的整数，以及另一个整数数组arrarr可能包含重复元素。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">每一次操作中，你可以在arr的任意位置插入任一整数。比方说，如果 arr = [1,4,1,2] ，那么你可以在中间添加 3 得到 [1,4,3,1,2] 。你可以在数组最开始或最后面添加整数。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">请你返回最少操作次数，使得 target 成为 arr 的一个子序列。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">一个数组的子序列 指的是删除原数组的某些元素（可能一个元素都不删除），同时不改变其余元素的相对顺序得到的数组。比方说，[2,7,4] 是 [4,2,3,7,2,1,4] 的子序列（加粗元素），但 [2,4,2] 不是子序列。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></div></figure><ul><li><p>解题思路</p><ul><li>我们可以令target的长度为n，arr的长度为m，target和arr的最长公共子序列长度为max，我们可以发现最终答案为n – max。</li><li>此题便变成了LCS问题。</li><li>但是朴素LCS问题求解会超时。</li><li>一个很显眼的切入点是：target数组元素各不相同，当 LCS 问题增加某些条件限制之后，会存在一些很有趣的性质。</li><li>当其中一个数组元素<em><strong>各不相同</strong></em>时，<strong>LCS问题可以转换为LIS进行求解</strong>。同时LIS存在使用贪心+二分解法，复杂度为O(nlogn)。</li><li>本题可以通过<ul><li>抽象成LCS问题</li><li>利用target数组元素各不相同，转换为LIS问题</li><li>使用LIS贪心+二分解法，时间复杂度可以达到O(nlogn)</li></ul></li></ul><ul><li><p>有些隐晦，我们举个例子：</p><ul><li><del>我能和你一起吃饭吗赵宝</del></li></ul></li></ul></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">tar = [6, 4, 8, 1, 3, 2],  arr = [4, 7, 6, 2, 3, 8, 6, 1]</span></span><br><span class="line"><span class="comment">因为我们只涉及给arr添加元素，最终答案也与arr无关，所以我们将arr中没在tar出现的元素去掉</span></span><br><span class="line"><span class="comment">tar = [6, 4, 8, 1, 3, 2], arr&#x27; = [4, 6, 2, 3, 8, 6, 1]</span></span><br><span class="line"><span class="comment">这时候注意到tar中元素无重复, 这个性质就像是索引一样, 我们当然就可以把他们当成索引, 得到一个新性质: 有序</span></span><br><span class="line"><span class="comment">idx = [0, 1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="comment">tar = [6, 4, 8, 1, 3, 2]</span></span><br><span class="line"><span class="comment">这样, </span></span><br><span class="line"><span class="comment">tar&#x27; = [0, 1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="comment">arr&#x27; = [1, 0, 5, 4, 2, 0, 3]</span></span><br><span class="line"><span class="comment">其中tar&#x27;是递增的顺序集合, 而arr&#x27;是一种乱序集合</span></span><br><span class="line"><span class="comment">这时候我们只需要找到arr&#x27;中最长的符合严格单调递增性质的子序列lis长度即可</span></span><br></pre></td></tr></table></div></figure><ul><li>代码：</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minOperations</span><span class="params">(<span class="keyword">int</span>[] target, <span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = target.length, m = arr.length;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            map.put(target[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = arr[i];</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(x)) list.add(map.get(x));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> len = list.size();</span><br><span class="line">        <span class="keyword">int</span>[] f = <span class="keyword">new</span> <span class="keyword">int</span>[len], g = <span class="keyword">new</span> <span class="keyword">int</span>[len + <span class="number">1</span>];</span><br><span class="line">        Arrays.fill(g, Integer.MAX_VALUE);</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> l = <span class="number">0</span>, r = len;</span><br><span class="line">            <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">                <span class="keyword">int</span> mid = (l + r + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> (g[mid] &lt; list.get(i)) l = mid;</span><br><span class="line">                <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> clen = r + <span class="number">1</span>;</span><br><span class="line">            f[i] = clen;</span><br><span class="line">            g[clen] = Math.min(g[clen], list.get(i));</span><br><span class="line">            max = Math.max(max, clen);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n - max;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li></ul>]]></content>
    
    
    <summary type="html">在本篇文章中，我们对LCS、LIS问题和两种问题互相转化的条件进行了讨论并列举三道例题。其中，LCS问题使用dp方法求解，LIS问题使用贪心+二分方法求解，时间复杂度达到O(nlogn)。当在特殊情况下，LCS问题也可以转化为LIS问题。</summary>
    
    
    
    <category term="Algorithm" scheme="http://example.com/categories/Algorithm/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="Algorithm" scheme="http://example.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>状态压缩dp</title>
    <link href="http://example.com/2022/01/20/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9dp/"/>
    <id>http://example.com/2022/01/20/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9dp/</id>
    <published>2022-01-20T08:12:03.000Z</published>
    <updated>2022-02-09T07:37:16.156Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="状态压缩dp"   >          <a href="#状态压缩dp" class="heading-link"><i class="fas fa-link"></i></a><a href="#状态压缩dp" class="headerlink" title="状态压缩dp"></a>状态压缩dp</h1>      <ul><li>将状态用二进制位表示并进行枚举</li><li>例：状态dp+01背包<ul><li>糖果店的老板一共有 M 种口味的糖果出售。为了方便描述，我们将 M 种口味编号 1 ∼ M。小明希望能品尝到所有口味的糖果。遗憾的是老板并不单独出售糖果，而是 K 颗一包整包出售。幸好糖果包装上注明了其中 K 颗糖果的口味，所以小明可以在买之前就知道每包内的糖果口味。给定 N 包糖果，请你计算小明最少买几包，就可以品尝到所有口味的糖果。</li><li>输入格式<ul><li>第一行包含三个整数 N、M 和 K。接下来 N 行每行 K 这整数 T₁, T₂, · · · , TK，代表一包糖果口味。</li></ul></li><li>输出格式<ul><li>一个整数表示答案。如果小明无法品尝所有口味，输出 −1。</li></ul></li></ul></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">n = scanner.nextInt();</span><br><span class="line">m = scanner.nextInt();</span><br><span class="line">k = scanner.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span> &lt;&lt; m];</span><br><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (<span class="number">1</span> &lt;&lt; m); j++) &#123;</span><br><span class="line">dp[j] = -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化很重要</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; j++) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = scanner.nextInt();</span><br><span class="line">a[i] = a[i] | (<span class="number">1</span> &lt;&lt; (temp - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//System.out.println(a[i]);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">System.out.println();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="comment">// 首先每次将新增糖果口味状态赋值为1保证最小</span></span><br><span class="line">            dp[a[i]] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (<span class="number">1</span> &lt;&lt; m); j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (dp[j] == -<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> to = j | a[i];</span><br><span class="line">                <span class="comment">// 如果能够凑够味道的地方之前没有，则为dp[j] + 1</span></span><br><span class="line"><span class="keyword">if</span> (dp[to] == -<span class="number">1</span>) dp[to] = dp[j] + <span class="number">1</span>;</span><br><span class="line">                <span class="comment">// 否则取最小值</span></span><br><span class="line"><span class="keyword">else</span> dp[to] = Math.min(dp[to], dp[j] + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1</span> &lt;&lt; m; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (dp[j] == -<span class="number">1</span>) System.out.print(<span class="string">&quot;无 &quot;</span>);</span><br><span class="line"><span class="keyword">else</span> System.out.print(dp[j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(dp[(<span class="number">1</span> &lt;&lt; m) - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
    
    
    <summary type="html">状态压缩dp是采用二进制来枚举状态进而运用动态规划求阶的方法</summary>
    
    
    
    <category term="Algorithm" scheme="http://example.com/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="http://example.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Java中算法所用语法总结</title>
    <link href="http://example.com/2022/01/20/Java/"/>
    <id>http://example.com/2022/01/20/Java/</id>
    <published>2022-01-20T04:23:21.000Z</published>
    <updated>2022-01-21T05:43:45.377Z</updated>
    
    <content type="html"><![CDATA[        <h2 id="基本输入输出"   >          <a href="#基本输入输出" class="heading-link"><i class="fas fa-link"></i></a><a href="#基本输入输出" class="headerlink" title="基本输入输出"></a>基本输入输出</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本输入</span></span><br><span class="line">Scanner in = <span class="keyword">new</span> Scanner (System.in);</span><br><span class="line">Scanner in = <span class="keyword">new</span> Scanner (<span class="keyword">new</span> BufferedInputStream(System.in));<span class="comment">//更快</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串输入</span></span><br><span class="line">String str = in.next();</span><br><span class="line"><span class="comment">// int long double 大位数 高精度</span></span><br><span class="line"><span class="keyword">int</span> i = in.nextInt();</span><br><span class="line"><span class="keyword">long</span> j = in.nextLong();</span><br><span class="line"><span class="keyword">double</span> k = in.nextDouble();</span><br><span class="line">BigInteger l = in.nextBigInteger();</span><br><span class="line">BigDecimal m = in.nextBigDecimal();</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">PrintWriter out = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> BufferedOutputStream(System.out));<span class="comment">//使用缓存加速，比直接使用System.out快</span></span><br><span class="line">out.println(n); </span><br><span class="line">out.printf(<span class="string">&quot;%.2f\n&quot;</span>, ans); <span class="comment">// 与c语言中printf用法相同</span></span><br></pre></td></tr></table></div></figure>        <h2 id="大整数与高精度"   >          <a href="#大整数与高精度" class="heading-link"><i class="fas fa-link"></i></a><a href="#大整数与高精度" class="headerlink" title="大整数与高精度"></a>大整数与高精度</h2>              <h3 id="大整数"   >          <a href="#大整数" class="heading-link"><i class="fas fa-link"></i></a><a href="#大整数" class="headerlink" title="大整数"></a>大整数</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger; </span><br><span class="line"><span class="comment">//主要有以下方法可以使用： </span></span><br><span class="line"><span class="function">BigInteger <span class="title">add</span><span class="params">(BigInteger other)</span> <span class="comment">// +</span></span></span><br><span class="line"><span class="function">BigInteger <span class="title">subtract</span><span class="params">(BigInteger other)</span> <span class="comment">// -</span></span></span><br><span class="line"><span class="function">BigInteger <span class="title">multiply</span><span class="params">(BigInteger other)</span> <span class="comment">// *</span></span></span><br><span class="line"><span class="function">BigInteger <span class="title">divide</span><span class="params">(BigInteger other)</span><span class="comment">// /</span></span></span><br><span class="line"><span class="function">BigInteger [] <span class="title">dividedandRemainder</span><span class="params">(BigInteger other)</span> <span class="comment">//数组第一位是商，第二位是余数</span></span></span><br><span class="line"><span class="function">BigInteger <span class="title">pow</span><span class="params">(<span class="keyword">int</span> other)</span><span class="comment">// other次方</span></span></span><br><span class="line"><span class="function">BigInteger <span class="title">mod</span><span class="params">(BigInteger other)</span> <span class="comment">// 模</span></span></span><br><span class="line"><span class="function">BigInteger <span class="title">gcd</span><span class="params">(BigInteger other)</span> <span class="comment">// 最大公约数</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(BigInteger other)</span> <span class="comment">//负数则小于,0则等于,正数则大于</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> BigInteger <span class="title">valueOf</span><span class="params">(<span class="keyword">long</span> x)</span></span></span><br><span class="line"><span class="function"><span class="comment">//输出数字时直接使用 System.out.println(a) 即可</span></span></span><br></pre></td></tr></table></div></figure>        <h3 id="高精度"   >          <a href="#高精度" class="heading-link"><i class="fas fa-link"></i></a><a href="#高精度" class="headerlink" title="高精度"></a>高精度</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BigDecimal <span class="title">add</span><span class="params">(BigDecimal other)</span></span></span><br><span class="line"><span class="function">BigDecimal <span class="title">subtract</span><span class="params">(BigDecimal other)</span></span></span><br><span class="line"><span class="function">BigDecimal <span class="title">multiply</span><span class="params">(BigDecimal other)</span></span></span><br><span class="line"><span class="function">BigInteger <span class="title">divide</span><span class="params">(BigInteger other)</span></span></span><br><span class="line"><span class="function">BigDecimal <span class="title">divide</span><span class="params">(BigDecimal divisor, <span class="keyword">int</span> scale, BigDecimal.ROUND_HALF_UP)</span><span class="comment">//除数，保留小数位数，保留方法四舍五入</span></span></span><br><span class="line"><span class="function">BigDecimal.<span class="title">setScale</span><span class="params">()</span>方法用于格式化小数点 <span class="comment">//setScale(1)表示保留一位小数，默认用四舍五入方式</span></span></span><br></pre></td></tr></table></div></figure>        <h2 id="String-StringBuilder"   >          <a href="#String-StringBuilder" class="heading-link"><i class="fas fa-link"></i></a><a href="#String-StringBuilder" class="headerlink" title="String, StringBuilder"></a>String, StringBuilder</h2>              <h3 id="String"   >          <a href="#String" class="heading-link"><i class="fas fa-link"></i></a><a href="#String" class="headerlink" title="String"></a>String</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// String</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回 char指定索引处的值</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 按字典顺序比较两个字符串。</span></span></span><br><span class="line"><span class="function"><span class="comment">// 如果String对象按字典顺序排列在参数字符串之前，结果为负整数。 结果是一个正整数，如果String对象按字典顺序跟随参数字符串。 如果字符串相等，结果为零;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(String anotherString)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 返回指定字符第一次出现的字符串内的索引。没有返回-1。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(<span class="keyword">int</span> ch, [<span class="keyword">int</span> fromIndex])</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="comment">// 返回一个字符串，该字符串是此字符串的子字符串。 子字符串以指定索引处的字符开头，并扩展到该字符串的末尾。</span></span></span><br><span class="line"><span class="function"><span class="comment">// 返回一个字符串，该字符串是此字符串的子字符串。 子串开始于指定beginIndex并延伸到字符索引endIndex - 1 。 因此，子串的长度为endIndex-beginIndex 。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex, <span class="keyword">int</span> endIndex)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 返回从替换所有出现的导致一个字符串oldChar在此字符串newChar 。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replace</span><span class="params">(<span class="keyword">char</span> oldChar, <span class="keyword">char</span> newChar)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 将此字符串拆分为给定的regular expression的匹配。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String[] <span class="title">split</span><span class="params">(String regex, <span class="keyword">int</span> limit)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String[] <span class="title">split</span><span class="params">(String regex)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 将此字符串转换为新的字符数组。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span>[] <span class="title">toCharArray</span><span class="params">()</span></span></span><br></pre></td></tr></table></div></figure>        <h3 id="StringBuilder"   >          <a href="#StringBuilder" class="heading-link"><i class="fas fa-link"></i></a><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// StringBuilder</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将参数附加到此序列。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuilder <span class="title">append</span><span class="params">(许多重载)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 返回char在指定索引在这个序列值。 第一个char值为索引0 ，下一个索引为1 ，依此类推，与数组索引一样。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 删除此序列的子字符串中的字符。 子串开始于指定start并延伸到字符索引end - 1</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuilder <span class="title">delete</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuilder <span class="title">deleteCharAt</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 用指定的String中的字符替换此序列的子字符串中的String 。 子串开始于指定start并延伸到字符索引end - 1 </span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuilder <span class="title">replace</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end, String str)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 将Object参数的字符串表示插入到此字符序列中。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuilder <span class="title">insert</span><span class="params">(<span class="keyword">int</span> offset, Object obj)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 反转</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuilder <span class="title">reverse</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 返回字符串</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 返回长度</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 设置长度</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span><span class="params">(<span class="keyword">int</span> newLength)</span></span></span><br><span class="line"><span class="function"><span class="comment">//返回char在指定索引在这个序列值。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 指定索引处的字符设置为ch 。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCharAt</span><span class="params">(<span class="keyword">int</span> index,  <span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 返回一个新的String ，其中包含此字符序列中当前包含的字符的子序列。 子串从指定的索引开始，并延伸到该序列的末尾。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> start， <span class="keyword">int</span> end)</span></span></span><br></pre></td></tr></table></div></figure>        <h2 id="进制转换"   >          <a href="#进制转换" class="heading-link"><i class="fas fa-link"></i></a><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String s = Integer.toString(a, x); <span class="comment">//把int型数据转换乘X进制数并转换成string型</span></span><br><span class="line"><span class="keyword">int</span> b = Integer.parseInt(s, x);<span class="comment">//把字符串当作X进制数转换成int型</span></span><br></pre></td></tr></table></div></figure>        <h2 id="排序"   >          <a href="#排序" class="heading-link"><i class="fas fa-link"></i></a><a href="#排序" class="headerlink" title="排序"></a>排序</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Arrays.sort(<span class="keyword">int</span>[] a, <span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span><br><span class="line">Collections.sort(List&lt;T&gt; list, Comparator&lt;? <span class="keyword">super</span> T&gt; c)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序举例</span></span><br><span class="line"><span class="comment">// 整型数组从大到小</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//返回值为负则o1排在o2前面，反正在后面，为0则表示相等</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果n1小于n2，我们就返回正值，如果n1大于n2我们就返回负值，</span></span><br><span class="line">        <span class="comment">//这样颠倒一下，就可以实现反向排序了</span></span><br><span class="line">        <span class="keyword">if</span>(o1 &lt; o2) &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(o1 &gt; o2) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="C-中的容器在Java中的用法"   >          <a href="#C-中的容器在Java中的用法" class="heading-link"><i class="fas fa-link"></i></a><a href="#C-中的容器在Java中的用法" class="headerlink" title="C++中的容器在Java中的用法"></a>C++中的容器在Java中的用法</h2>      <p><img src="/image/rongqi.png" alt="容器"></p><div class="table-container"><table><thead><tr><th align="center">C++</th><th align="center">Java</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">vector</td><td align="center">ArrayList</td><td align="center">可变长度数组</td></tr><tr><td align="center">list</td><td align="center">LinkList</td><td align="center">链表</td></tr><tr><td align="center">deque</td><td align="center">ArrayDeque</td><td align="center">双端队列</td></tr><tr><td align="center">stack</td><td align="center">Stack</td><td align="center">栈</td></tr><tr><td align="center">queue</td><td align="center">Queue</td><td align="center">队列</td></tr><tr><td align="center">priority_queue</td><td align="center">PriorityQueue</td><td align="center">支持优先队列</td></tr><tr><td align="center">set</td><td align="center">TreeSet</td><td align="center">集合、数据有序、二叉搜索树实现</td></tr><tr><td align="center">unordered_set</td><td align="center">HashSet</td><td align="center">哈希表组织的set</td></tr><tr><td align="center"></td><td align="center">LinkedHashSet</td><td align="center">按插入有序，支持哈希查找</td></tr><tr><td align="center">map</td><td align="center">TreeMap</td><td align="center">键值对映射，按key有序</td></tr><tr><td align="center">unordered_map</td><td align="center">HashMap</td><td align="center">hash组织的map</td></tr><tr><td align="center"></td><td align="center">LinkedHashMap</td><td align="center">按插入有序，支持哈希查找</td></tr></tbody></table></div>        <h3 id="Vector-gt-ArrayList"   >          <a href="#Vector-gt-ArrayList" class="heading-link"><i class="fas fa-link"></i></a><a href="#Vector-gt-ArrayList" class="headerlink" title="Vector -&gt; ArrayList"></a>Vector -&gt; ArrayList</h3>      <ul><li>可调整大小的数组的实现<code>List</code>接口。</li></ul> <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回此列表中的元素数。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 返回此列表中指定元素的第一次出现的索引，如果此列表不包含元素，则返回-1。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 将指定集合中的所有元素插入到此列表中，从指定的位置开始。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> <span class="comment">// 返回被删除元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">removeRange</span><span class="params">(<span class="keyword">int</span> fromIndex,  <span class="keyword">int</span> toIndex)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 将指定的元素追加到此列表的末尾。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br></pre></td></tr></table></div></figure>        <h3 id="list-gt-LinkedList"   >          <a href="#list-gt-LinkedList" class="heading-link"><i class="fas fa-link"></i></a><a href="#list-gt-LinkedList" class="headerlink" title="list -&gt; LinkedList"></a>list -&gt; LinkedList</h3>      <ul><li>用法基本同ArrayList, 但底层实现为链表</li></ul>        <h3 id="ArrayDeque"   >          <a href="#ArrayDeque" class="heading-link"><i class="fas fa-link"></i></a><a href="#ArrayDeque" class="headerlink" title="ArrayDeque"></a>ArrayDeque</h3>      <ul><li><p>可以用此数据结构实现栈、队列和双端队列</p></li><li><p><strong>不允许</strong>null元素</p></li></ul> <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当作为栈的时候</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span> <span class="comment">// 向队首插入元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span><span class="comment">// 弹出返回队首元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">peek</span><span class="params">()</span><span class="comment">// 检索队首元素</span></span></span><br><span class="line"><span class="function"><span class="comment">// 当作为队列时</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span><span class="comment">// 向队尾插入元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span><span class="comment">// 弹出返回队首元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">peek</span><span class="params">()</span><span class="comment">// 检索队首元素</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 当作为双端队列时</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span><span class="comment">// 向队首插入元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span><span class="comment">// 向队尾插入元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">getFirst</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">getLast</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeFirst</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeLast</span><span class="params">()</span></span></span><br></pre></td></tr></table></div></figure>        <h3 id="PriorityQueue"   >          <a href="#PriorityQueue" class="heading-link"><i class="fas fa-link"></i></a><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h3>      <ul><li><p>基于优先级堆的无限优先级<strong>queue</strong>。 </p></li><li><p><strong>不允许</strong>null元素</p></li><li><p>小顶堆</p></li></ul> <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 优先队列举例</span></span><br><span class="line"><span class="comment">// 实现大顶堆排序</span></span><br><span class="line">Comparator&lt;Object&gt; Order = <span class="keyword">new</span> Comparator&lt;&gt;() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object n1, Object n2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">int</span>) n1 &gt; (<span class="keyword">int</span>) n2) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="keyword">int</span>) n1 == (<span class="keyword">int</span>) n2) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">PriorityQueue&lt;Integer&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;(<span class="number">10</span>, Order);</span><br><span class="line">pq.add(<span class="number">1</span>);<span class="comment">// 添加元素</span></span><br><span class="line">pq.add(<span class="number">3</span>);</span><br><span class="line">pq.add(<span class="number">2</span>);</span><br><span class="line">System.out.println(pq.peak());</span><br><span class="line">System.out.println(pq.poll());</span><br><span class="line">System.out.println(pq.peak());</span><br><span class="line">System.out.println(pq.poll());</span><br><span class="line">System.out.println(pq.peak());</span><br><span class="line">System.out.println(pq.poll());</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出： 3 3 2 2 1 1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 若想对堆中元素进行遍历</span></span><br><span class="line">Object[] nums = pq.toArray();</span><br><span class="line">Arrays.sort(nums, Order);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) System.out.println(nums[i]);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出： 3 2 1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></div></figure>        <h3 id="迭代器"   >          <a href="#迭代器" class="heading-link"><i class="fas fa-link"></i></a><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3>       <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;Integer&gt; c = <span class="keyword">new</span> Collection&lt;&gt;();</span><br><span class="line">Iterator iter = c.Iterator();</span><br><span class="line"><span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">    Integer temp = iter.next();</span><br><span class="line">    System.out.println(temp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="HashSet-amp-TreeSet"   >          <a href="#HashSet-amp-TreeSet" class="heading-link"><i class="fas fa-link"></i></a><a href="#HashSet-amp-TreeSet" class="headerlink" title="HashSet &amp; TreeSet"></a>HashSet &amp; TreeSet</h3>      <ul><li><p>不会存储重复的元素</p></li><li><p>TreeSet 保证集合有序，基于红黑树。而HashSet 基于哈希表实现。</p></li></ul> <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TreeSet</span></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line">TreeSet(Comparator&lt;? <span class="keyword">super</span> E&gt; comparator)</span><br><span class="line">TreeSet(SortedSet&lt;E&gt; set)</span><br><span class="line">TreeSet(Collection&lt;? extends E&gt; collection)</span><br><span class="line"><span class="comment">// 增加元素</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; collection)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 弹出</span></span></span><br><span class="line"><span class="function">E <span class="title">pollFirst</span><span class="params">()</span></span></span><br><span class="line"><span class="function">E <span class="title">pollLast</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 等等</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// HashSet</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span></span></span><br></pre></td></tr></table></div></figure>        <h3 id="HashMap-amp-TreeMap"   >          <a href="#HashMap-amp-TreeMap" class="heading-link"><i class="fas fa-link"></i></a><a href="#HashMap-amp-TreeMap" class="headerlink" title="HashMap &amp; TreeMap"></a>HashMap &amp; TreeMap</h3>      <ul><li><p>键值对</p></li><li><p>Map是java中的接口，Map.Entry是Map的一个内部接口。</p></li><li><p>由于Map中没有实现Iterator接口，故需要转化为set类型，用entrySet()方法。</p></li><li><p>TreeSet不允许有重复的Key，重复put只会覆盖上一个值</p></li></ul> <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line"><span class="comment">// 插入键值对</span></span><br><span class="line">map.put(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;value2&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;value3&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历方法1：遍历KeySet, 取值 </span></span><br><span class="line"><span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">    System.out.println(map.get(key));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历方法2：通过Iterator</span></span><br><span class="line">Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iter = map.entrySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">    Map.Entry entry = iter.next();</span><br><span class="line">    System.out.println(<span class="string">&quot;key= &quot;</span> + entry.getKey() + <span class="string">&quot; and value= &quot;</span> + entry.getValue());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历方法3：直接遍历Entry</span></span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;key= &quot;</span> + entry.getKey() + <span class="string">&quot; and value= &quot;</span> + entry.getValue());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历方法4：仅仅遍历Value</span></span><br><span class="line"><span class="keyword">for</span> (String v : map.values()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;value= &quot;</span> + v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure> <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LeetCode 347 返回前K高频元素</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] topKFrequent(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(num)) &#123;</span><br><span class="line">                map.put(num, map.get(num) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> map.put(num, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;Map.Entry&lt;Integer, Integer&gt;&gt; set = map.entrySet();</span><br><span class="line">        PriorityQueue&lt;Map.Entry&lt;Integer, Integer&gt;&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;((o1, o2) -&gt; (o1.getValue() - o2.getValue()));</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : set) &#123;</span><br><span class="line">            pq.offer(entry);</span><br><span class="line">            <span class="keyword">if</span> (pq.size() &gt; k) &#123;</span><br><span class="line">                pq.poll();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[k];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = k - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) result[i] = pq.poll().getKey();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
    
    
    <summary type="html">本篇文章主要讲述了Java在刷算法题时的应用总结，包括输入输出、字符串、容器等等。对于以上的每个方面，都有详细介绍以便在需要时查阅。</summary>
    
    
    
    <category term="Algorithm" scheme="http://example.com/categories/Algorithm/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="Algorithm" scheme="http://example.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>MarkDown语法</title>
    <link href="http://example.com/2022/01/18/MarkDown/"/>
    <id>http://example.com/2022/01/18/MarkDown/</id>
    <published>2022-01-18T08:30:21.000Z</published>
    <updated>2022-01-21T05:40:32.917Z</updated>
    
    <content type="html"><![CDATA[        <h2 id="代码块"   >          <a href="#代码块" class="heading-link"><i class="fas fa-link"></i></a><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2>      <ol><li>代码块</li></ol>  <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//```java</span></span><br><span class="line"><span class="comment">// 代码块</span></span><br><span class="line">System.out.println(<span class="string">&quot;Hello!&quot;</span>);</span><br></pre></td></tr></table></div></figure><ol start="2"><li> shell 脚本</li></ol>   <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">```shell</span><br><span class="line"><span class="meta">#</span><span class="bash"> java -jar</span></span><br></pre></td></tr></table></div></figure>        <h2 id="标题"   >          <a href="#标题" class="heading-link"><i class="fas fa-link"></i></a><a href="#标题" class="headerlink" title="标题"></a>标题</h2>         <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">...</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></div></figure>        <h2 id="字体"   >          <a href="#字体" class="heading-link"><i class="fas fa-link"></i></a><a href="#字体" class="headerlink" title="字体"></a>字体</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加粗</span></span><br><span class="line">**等不到天黑**</span><br><span class="line"><span class="comment">// 代码高亮显示</span></span><br><span class="line">==烟火不是太完美==</span><br><span class="line"><span class="comment">// 删除线</span></span><br><span class="line">~~被删除~~</span><br><span class="line"><span class="comment">// 斜体</span></span><br><span class="line">*斜体内容*</span><br></pre></td></tr></table></div></figure><p><strong>等不到天黑</strong><br><del>被删除</del><br><em>斜体内容</em></p>        <h2 id="引用"   >          <a href="#引用" class="heading-link"><i class="fas fa-link"></i></a><a href="#引用" class="headerlink" title="引用"></a>引用</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引用语法</span></span><br><span class="line">&gt;作者：赵阳</span><br><span class="line">&gt;&gt;作者：赵阳</span><br><span class="line">&gt;&gt;&gt;作者：赵阳</span><br></pre></td></tr></table></div></figure><p>// 引用语法</p><blockquote><p>作者：赵阳</p><blockquote><p>作者：赵阳</p><blockquote><p>作者：赵阳</p></blockquote></blockquote></blockquote>        <h2 id="分割线"   >          <a href="#分割线" class="heading-link"><i class="fas fa-link"></i></a><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分割线</span></span><br><span class="line">---</span><br><span class="line"><span class="comment">// 分割线2</span></span><br><span class="line">***</span><br></pre></td></tr></table></div></figure><hr>        <h2 id="图片插入"   >          <a href="#图片插入" class="heading-link"><i class="fas fa-link"></i></a><a href="#图片插入" class="headerlink" title="图片插入"></a>图片插入</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 图片插入</span></span><br><span class="line">![图片名称](图片路径)</span><br></pre></td></tr></table></div></figure><p><img src="/image/picture1.jpg" alt="我的图片"></p>        <h2 id="超链接"   >          <a href="#超链接" class="heading-link"><i class="fas fa-link"></i></a><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 超链接语法</span></span><br><span class="line">[我的超链接](链接地址)</span><br></pre></td></tr></table></div></figure><p><a href="www.baidu.com">我的超链接</a></p>        <h2 id="列表"   >          <a href="#列表" class="heading-link"><i class="fas fa-link"></i></a><a href="#列表" class="headerlink" title="列表"></a>列表</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无序列表</span></span><br><span class="line">- 目录<span class="number">1</span></span><br><span class="line">- 目录<span class="number">2</span></span><br><span class="line">- 目录<span class="number">3</span></span><br><span class="line"><span class="comment">// 有序列表</span></span><br><span class="line"><span class="number">1.</span> 目录<span class="number">1</span></span><br><span class="line"><span class="number">2.</span> 目录<span class="number">2</span></span><br><span class="line"><span class="number">3.</span> 目录<span class="number">3</span></span><br></pre></td></tr></table></div></figure><ul><li>目录1</li><li>目录2</li><li>目录3</li></ul><ol><li>目录1</li><li>目录2</li><li>目录3</li></ol>        <h2 id="表格"   >          <a href="#表格" class="heading-link"><i class="fas fa-link"></i></a><a href="#表格" class="headerlink" title="表格"></a>表格</h2>      <div class="table-container"><table><thead><tr><th>123</th><th>123</th><th>456</th></tr></thead><tbody><tr><td>456</td><td></td><td></td></tr><tr><td>1</td><td></td><td></td></tr><tr><td>2</td><td><em>123</em></td><td></td></tr></tbody></table></div>]]></content>
    
    
    <summary type="html">在初学MarkDown时接触到的语法所写。基本包括了MarkDown所有语法，在学习更多后会继续补充。</summary>
    
    
    
    <category term="Other tools" scheme="http://example.com/categories/Other-tools/"/>
    
    
    <category term="Tools" scheme="http://example.com/tags/Tools/"/>
    
  </entry>
  
</feed>
